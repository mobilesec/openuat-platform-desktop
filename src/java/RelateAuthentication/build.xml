<?xml version="1.0" encoding="UTF-8"?>
<project name="spatial-authentication" default="junit" basedir=".">
    <property name="src" location="src"/>
    <property name="bin" location="bin"/>
    <property name="lib" location="lib"/>
    <property name="dist" location="dist"/>
    <property name="dist.mainclass" value="org.eu.mayrhofer.authentication.RelateAuthenticationProtocol"/>
    <property name="jarfile" location="${dist}/${ant.project.name}.jar"/>
    <property name="reports.tests" location="reports/tests"/>
    <property name="compile.debug" value="true"/>

    <!-- for MIDP builds -->
    <property name="preverified" location="bin-preverified"/>
    <property name="midp_home" value="/opt/j2me/WTK2.2" />
    <property name="midp_libs" value="${midp_home}/lib/midpapi20.jar:${midp_home}/lib/cldcapi11.jar" />

    <!-- this can be used in a refid for filesets -->
    <fileset id="lib.alljars" dir="${lib}">
        <include name="**/*.jar"/>
    </fileset>

    <!-- this can be used in a refid for classpaths -->
    <path id="lib.path">
        <fileset refid="lib.alljars"/>
    </path>

    <target name="compile" description="Compile code">
        <mkdir dir="${bin}"/>
        <mkdir dir="${lib}"/>
        <javac srcdir="${src}" destdir="${bin}" includeAntRuntime="no"
               classpathref="lib.path" debug="${compile.debug}" target="1.1" source="1.2">
        </javac>
    </target>

    <target name="compile-midp" description="Compile special classes for MIDP2.0">
        <javac srcdir="${src}" destdir="${bin}" includeAntRuntime="no"
               classpathref="lib.path" debug="${compile.debug}" target="1.2" source="1.2">
        <!-- TODO: missing, include midp jars in classpath -->
        </javac>
    </target>

    <target name="preverify" depends="compile">
        <mkdir dir="${preverified}" />
        <exec executable="${midp_home}/bin/preverify">
				    <arg line="-classpath ${midp_libs}"/>
				    <arg line="-d ${preverified}"/>
 				    <arg line="${bin}"/>
			  </exec>
    </target>

    <target name="jar" depends="compile" description="Build jar">
        <mkdir dir="${dist}"/>
        <jar jarfile="${jarfile}" basedir="${bin}" manifest="Manifest">
            <!-- Merge library jars into final jar file -->
            <!-- <zipgroupfileset refid="lib.jars"/> -->
        </jar>
    </target>

    <target name="junit" depends="jar" description="Run unit tests">
	    <mkdir dir="${reports.tests}"/>
	    <junit printsummary="on" haltonfailure="true">
		    <sysproperty key="java.library.path" value="nativelib/linux" />
		    <classpath>
			    <fileset refid="lib.alljars"/>
			    <pathelement location="${jarfile}"/>
		    </classpath>
		    <batchtest todir="${reports.tests}">
			    <fileset dir="${src}">
				    <include name="**/*Test*.java"/>
			    </fileset>
		    </batchtest>
	    </junit>
    </target>
    
    <target name="run" depends="jar" description="Run jar file">
        <!-- executing the jar obviously does not work with an additional classpath, but only with a single
	     merged jar file, so just specify the class -->
        <!--<java jar="${jarfile}" fork="yes" failonerror="true" >-->
	    <java classname="${dist.mainclass}" fork="yes" failonerror="true" >
	    <sysproperty key="java.library.path" value="nativelib/linux" />
            <classpath>
		    <fileset refid="lib.alljars"/>
		    <pathelement location="${jarfile}"/>
	    </classpath>
        </java>
    </target>

	  <taskdef name="nsis" classname="info.waynegrant.ant.NsisTask">
    	<classpath>
      	<pathelement location="${lib}/wat-12.jar"/>
      </classpath>
    </taskdef>
    <target name="installer" depends="junit" description="Create installers">
    	<nsis script="${dist}/windows.nsi" verbosity="4" nocd="yes">
        <define name="distdir" value="${dist}"/>
        <define name="nativelibs" value="${thirdparty.nativelib}/windows"/>
        <scriptcmd cmd="CRCcheck on"/>
      </nsis>
    </target>


    <target name="clean" description="Remove build and dist directories">
        <delete dir="${bin}"/>
        <delete>
        	<fileset dir="${dist}" includes="*.jar"/>
        </delete>
				<delete dir="${reports.tests}"/>
    </target>
</project>
